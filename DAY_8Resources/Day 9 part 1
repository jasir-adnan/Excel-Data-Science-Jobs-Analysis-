%%sql
WITH yearly_cohort AS (
  SELECT DISTINCT
  customerkey,
  EXTRACT(YEAR FROM orderdate) AS purchase_year,
  EXTRACT(YEAR FROM MIN(orderdate) OVER (PARTITION BY customerkey))AS cohort_year
  FROM sales)
SELECT DISTINCT
  cohort_year, purchase_year,
  COUNT(customerkey) OVER(PARTITION BY cohort_year,purchase_year)AS num_of_customers
FROM yearly_cohort
ORDER BY cohort_year, purchase_year
--------------------------------for extracting cx_ltv in terms of cohort year------------------
%%sql
WITH yearly_cohort AS(
  SELECT
  customerkey,
  EXTRACT(YEAR FROM MIN(orderdate))AS cohort_year,
  SUM(quantity*netprice*exchangerate) AS cx_ltv
  FROM sales
  GROUP BY customerkey)
SELECT 
  *,
  AVG(cx_ltv) OVER (PARTITION BY cohort_year) AS AVG_CX_LTV
FROM yearly_cohort
ORDER BY cohort_year,customerkey
------------------------------- calculating running avg count of customers by using order by within window functions -----------------
%%sql
SELECT 
  customerkey,
  orderdate,
  quantity*netprice*exchangerate AS net_rev,
  COUNT(*) OVER(
    PARTITION BY customerkey
    ORDER BY orderdate
  ) AS running_order_count,
  AVG(quantity*netprice*exchangerate) OVER(
    PARTITION BY customerkey
    ORDER BY orderdate
  ) AS avg_running_order_count
  
FROM sales
--------------------------------------------applying row numbers for each date so we can see how many order were place in a day-----------------------------------
%%sql
WITH rows AS(
  SELECT
  ROW_NUMBER() OVER(
  PARTITION BY orderdate
  ORDER BY
  orderdate,
  orderkey,
  linenumber) AS row_num,
  *
  FROM sales)
SELECT *
FROM rows
WHERE orderdate > '2015-01-01'
LIMIT 10
---------------------------------ranking--------------------
%%sql

WITH rows AS(
SELECT
  customerkey,
  COUNT(*) AS total_orders,
  ROW_NUMBER() OVER(ORDER BY COUNT (*) DESC) AS total_orders_row_num,
  RANK() OVER(ORDER BY COUNT (*) DESC) AS total_orders_rank,
  DENSE_RANK() OVER(ORDER BY COUNT (*) DESC) AS total_orders_dense_rank
FROM sales
GROUP BY customerkey

)
SELECT *
FROM rows
LIMIT 10
------------------------------------------------lag and lead-------------------------------------
%%sql
SELECT
TO_CHAR(orderdate,'YYYY-MM') AS month,
SUM(quantity*netprice*exchangerate) AS net_revenue
FROM sales
GROUP BY month
ORDER BY month
----------------------------------- example-------------
%%sql
WITH monthyly_revenue AS(
  SELECT
  TO_CHAR(orderdate,'YYYY-MM') AS month,
  SUM(quantity*netprice*exchangerate) AS net_revenue
  FROM sales
  WHERE EXTRACT (YEAR FROM orderdate ) = 2023
  GROUP BY month
  ORDER BY month)
SELECT *,
FIRST_VALUE(net_revenue) OVER (ORDER BY month) AS first_month_revenue,
LAG(net_revenue) OVER (ORDER BY month) AS previous_month_revenue,
LEAD(net_revenue) OVER (ORDER BY month) AS next_month_revenue,
NTH_VALUE(net_revenue,3) OVER (ORDER BY month) AS third_month_revenue
FROM monthyly_revenue
----------------------------to calculate month over month growth using lag------------------------
%%sql
WITH monthyly_revenue AS(
  SELECT
  TO_CHAR(orderdate,'YYYY-MM') AS month,
  SUM(quantity*netprice*exchangerate) AS net_revenue
  FROM sales
  WHERE EXTRACT (YEAR FROM orderdate ) = 2023
  GROUP BY month
  ORDER BY month)
SELECT *,

LAG(net_revenue) OVER (ORDER BY month) AS previous_month_revenue,

net_revenue - LAG(net_revenue) OVER (ORDER BY month) AS montly_revenue_growth,
(net_revenue - LAG(net_revenue) OVER (ORDER BY month) )/LAG(net_revenue) OVER (ORDER BY month) AS ROC_of_monthy_revenue_growth
FROM monthyly_revenue

